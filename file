     1	//$
     2	/* ************************************************************************** */$
     3	//$
     4	/*                                                                            */$
     5	//$
     6	/*                                                        :::      ::::::::   */$
     7	//$
     8	/*   main.c                                             :+:      :+:    :+:   */$
     9	// /*                                                    +:+ +:+$
    10	// +:+     */$
    11	// /*   By: zasabri <zasabri@student.42.fr>            +#+  +:+$
    12	// +#+        */$
    13	// /*                                                +#+#+#+#+#+$
    14	// +#+           */$
    15	//$
    16	/*   Created: 2023/02/20 00:48:54 by abouramd          #+#    #+#             */$
    17	//$
    18	/*   Updated: 2023/03/02 13:48:33 by zasabri          ###   ########.fr       */$
    19	//$
    20	/*                                                                            */$
    21	//$
    22	/* ************************************************************************** */$
    23	$
    24	// #include "include.h"$
    25	// #include "exec.h"$
    26	$
    27	// void print_start(void)$
    28	// {$
    29	// 	ft_putstr_fd("\033[1;32m\n", 1);$
    30	// 	ft_putstr_fd("  \n", 1);$
    31	// 	ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W   ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W   ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W     \n",$
    32	// 1);$
    33	// 	ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q     \n",$
    34	// 1);$
    35	// 	ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W   ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q     \n",$
    36	// 1);$
    37	// 	ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q‚M-^UM-^Z‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^]‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q‚M-^UM-^Z‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^UM-^]   ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q     \n",$
    38	// 1);$
    39	// 	ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^UM-^Z‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W\n",$
    40	// 1);$
    41	// 	ft_putstr_fd("  ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^]     ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^]  ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^]  ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^]\n",$
    42	// 1);$
    43	// 	ft_putstr_fd("\033[0m\n", 1);$
    44	// }$
    45	$
    46	// char *put_prompt(t_data *f)$
    47	// {$
    48	// 	char *prompt;$
    49	// 	char *tmp;$
    50	// 	char *s;$
    51	// 	char *color;$
    52	// 	char pwd[1024];$
    53	$
    54	// 	color = "\033[1;32m)";$
    55	// 	if (f->exit_status != 0)$
    56	// 		color = "\033[1;31m)";$
    57	// 	signal(SIGINT, signal_handler);$
    58	// 	tcsetattr(0, TCSANOW, &f->new_tty);$
    59	// 	getcwd(pwd, 1024);$
    60	// 	tmp = ft_strjoin(color, pwd);$
    61	// 	prompt = ft_strjoin(tmp, " >> \033[0m");$
    62	// 	s = readline(prompt);$
    63	// 	free(prompt);$
    64	// 	free(tmp);$
    65	// 	signal(SIGINT, SIG_IGN);$
    66	// 	f->exit_status = 0;$
    67	// 	return (s);$
    68	// }$
    69	// void free_cmd(t_cmd_list *list)$
    70	// {$
    71	// 	if (list->cmd)$
    72	// 		ft_free(list->cmd);$
    73	// 	if (list->infile != 0)$
    74	// 		close(list->infile);$
    75	// 	if (list->outfile != 1)$
    76	// 		close(list->outfile);$
    77	// 	if (list->namehrd)$
    78	// 	{$
    79	// 		unlink(list->namehrd);$
    80	// 		free(list->namehrd);$
    81	// 	}$
    82	// 	free(list);$
    83	// }$
    84	$
    85	// void free_all(t_data *f)$
    86	// {$
    87	// 	t_cmd_list *p = f->list_of_cmd;$
    88	// 	t_cmd_list *tmp = f->list_of_cmd;$
    89	$
    90	// 	while (tmp)$
    91	// 	{$
    92	// 		tmp = p;$
    93	// 		tmp = tmp -> next;$
    94	// 		free_cmd(p);$
    95	// 		p = tmp;$
    96	// 	}$
    97	// }$
    98	$
    99	// void setup_shell(int ac, char **av, char **env, t_data *d)$
   100	// {$
   101	// 	(void)ac;$
   102	// 	(void)av;$
   103	// 	tcgetattr(0, &d->new_tty);$
   104	// 	tcgetattr(0, &d->old_tty);$
   105	// 	d->new_tty.c_lflag &= ~ECHOCTL;$
   106	// 	tcsetattr(0, TCSANOW, &d->new_tty);$
   107	// 	sigaction(SIGINT, NULL, &d->old_sigint);$
   108	// 	sigaction(SIGQUIT, NULL, &d->old_sigquit);$
   109	// 	signal(SIGQUIT, SIG_IGN);$
   110	// 	signal(SIGINT, signal_handler);$
   111	// 	print_start();$
   112	// 	d->exit_status = 0;$
   113	// 	d->my_env = alloc_env(env);$
   114	// }$
   115	$
   116	// void free_lexer(t_list *list)$
   117	// {$
   118	// 	t_vals *tmp;$
   119	// 	t_list *p;$
   120	$
   121	// 	while (list)$
   122	// 	{$
   123	// 		tmp = list->content;$
   124	// 		if (!tmp)$
   125	// 		{$
   126	// 			free(tmp->val);$
   127	// 			free(tmp);$
   128	// 		}$
   129	// 		p = list;$
   130	// 		list = list->next;$
   131	// 		free(p);$
   132	// 	}$
   133	// }$
   134	$
   135	// // char	*replace_the_value(char	*cmd, char *str)$
   136	// // {$
   137	// // 	if (str)$
   138	// // 		cmd = str;$
   139	// // 	return (cmd);$
   140	// // }$
   141	// int	main(int ac, char **av, char **env)$
   142	// {$
   143	// 	char		*rl;$
   144	// 	t_data		d;$
   145	// 	t_list		*lexer;$
   146	// 	//t_cmd_list *save;$
   147	$
   148	// 	setup_shell(ac, av, env, &d);$
   149	// 	while (1)$
   150	// 	{$
   151	// 		rl = put_prompt(&d);$
   152	// 		if (!rl)$
   153	// 			return (write(1, "exit\n", 5),tcsetattr(0, TCSANOW, &d.old_tty), 0);$
   154	// 		if (*rl)$
   155	// 		{$
   156	// 			add_history(rl);$
   157	// 			lexer = lexecal_analyzer(rl);$
   158	// 			//test(lexer);$
   159	// 			if (lexer == NULL || all_is_good(lexer, d.my_env))$
   160	// 			{$
   161	// 				if (lexer)$
   162	// 					free_lexer(lexer);$
   163	// 				free(rl);$
   164	// 				continue ;$
   165	// 			}$
   166	// 			d.list_of_cmd = command_table(lexer, &d.exit_status);$
   167	// 			//save = d.list_of_cmd;$
   168	// 			//int i = 0;$
   169	// 			// if (save->cmd)$
   170	// 			// {$
   171	// 			// 	char *ptr;$
   172	$
   173	// 			// 	while (save->cmd[i])$
   174	// 			// 	{$
   175	// 			// 		if ((ft_strnstr(save->cmd[i], "$",$
   176	// ft_strlen(save->cmd[i]))))$
   177	// 			// 				save->cmd[i] = replace_the_value(save->cmd[i],$
   178	// print_env_content(save->cmd[i], d.my_env));$
   179	// 			// 		i++;$
   180	// 			// 	}$
   181	// 			// 	ptr = save->cmd[i];$
   182	// 			// 	free(ptr);$
   183	// 			// }$
   184	// 			free_lexer(lexer);$
   185	// 			if (!d.exit_status && d.list_of_cmd)$
   186	// 				pipeline(&d);$
   187	// 			free_all(&d);$
   188	// 		}$
   189	// 		free(rl);$
   190	// 	}$
   191	// }$
   192	$
   193	#include "exec.h"$
   194	#include "include.h"$
   195	$
   196	void	print_start(void)$
   197	{$
   198		ft_putstr_fd("\033[1;32m\n", 1);$
   199		ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W   ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W   ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W \$
   200	‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W     \n",$
   201						1);$
   202		ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q \$
   203	‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q     \n",$
   204						1);$
   205		ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q \$
   206	‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W   ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q     \n",$
   207						1);$
   208		ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q‚M-^UM-^Z‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^]‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q‚M-^UM-^Z‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q \$
   209	‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^T‚M-^UM-^P‚M-^UM-^P‚M-^UM-^]   ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q      ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q     \n",$
   210						1);$
   211		ft_putstr_fd("  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^UM-^Z‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q \$
   212	‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q  ‚M-^VM-^H‚M-^VM-^H‚M-^UM-^Q ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W ‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^VM-^H‚M-^UM-^W\n",$
   213						1);$
   214		ft_putstr_fd("  ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^]     ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^]  ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] \$
   215	‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^]  ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^] ‚M-^UM-^Z‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^P‚M-^UM-^]\n",$
   216						1);$
   217		ft_putstr_fd("\033[0m\n", 1);$
   218	}$
   219	$
   220	char	*put_prompt(t_data *f)$
   221	{$
   222		char	*prompt;$
   223		char	*s;$
   224		char	*color;$
   225		char	pwd[PATH_MAX];$
   226	$
   227		f->kill_here = 0;$
   228		signal(SIGINT, signal_handler);$
   229		tcsetattr(0, TCSANOW, &f->new_tty);$
   230		getcwd(pwd, PATH_MAX - 1);$
   231		color = "\033[1;32m";$
   232		if (f->exit_status != 0)$
   233			color = "\033[1;31m";$
   234		ft_putstr_fd(color, 1);$
   235		prompt = ft_strjoin(pwd, " >> \033[0m");$
   236		s = readline(prompt);$
   237		free(prompt);$
   238		signal(SIGINT, SIG_IGN);$
   239		return (s);$
   240	}$
   241	$
   242	void	free_cmd(t_cmd_list *list)$
   243	{$
   244		if (list->cmd)$
   245			ft_free(list->cmd);$
   246		if (list->infile != 0)$
   247			close(list->infile);$
   248		if (list->outfile != 1)$
   249			close(list->outfile);$
   250		if (list->infile_name)$
   251			free(list->infile_name);$
   252		if (list->outfile_name)$
   253			free(list->outfile_name);$
   254		free(list);$
   255	}$
   256	$
   257	void	free_all(t_data *f)$
   258	{$
   259		t_cmd_list	*p;$
   260		t_cmd_list	*tmp;$
   261	$
   262		p = f->list_of_cmd;$
   263		tmp = f->list_of_cmd;$
   264		while (tmp)$
   265		{$
   266			tmp = p;$
   267			tmp = tmp->next;$
   268			free_cmd(p);$
   269			p = tmp;$
   270		}$
   271	}$
   272	$
   273	void	setup_shell(int ac, char **av, char **env, t_data *d)$
   274	{$
   275		char	*tmp;$
   276		char	pwd[PATH_MAX];$
   277	$
   278		(void)ac;$
   279		d->tty = ttyname(0);$
   280		tmp = d->tty;$
   281		d->tty = ft_strtrim(d->tty, "/dev/ttys");$
   282		free(tmp);$
   283		tcgetattr(0, &d->new_tty);$
   284		tcgetattr(0, &d->old_tty);$
   285		d->new_tty.c_lflag &= ~ECHOCTL;$
   286		tcsetattr(0, TCSANOW, &d->new_tty);$
   287		sigaction(SIGINT, NULL, &d->old_sigint);$
   288		sigaction(SIGQUIT, NULL, &d->old_sigquit);$
   289		signal(SIGQUIT, SIG_IGN);$
   290		signal(SIGINT, signal_handler);$
   291		print_start();$
   292		d->exit_status = 0;$
   293		d->my_env = alloc_env(env);$
   294		getcwd(pwd, PATH_MAX - 1);$
   295		tmp = ft_strtrim(av[0], "./");$
   296		tmp = ft_free_joined("/", tmp, 0, 1);$
   297		tmp = ft_free_joined(pwd, tmp, 0, 1);$
   298		ft_env_add("SHELL", tmp, &d->my_env);$
   299		free(tmp);$
   300	}$
   301	$
   302	void	free_lexer(t_list *list)$
   303	{$
   304		t_vals	*tmp;$
   305	$
   306		if (list)$
   307		{$
   308			if (list->next)$
   309				free_lexer(list->next);$
   310			tmp = (t_vals *)list->content;$
   311			if (tmp)$
   312			{$
   313				if (tmp->val && tmp->token == V_STR)$
   314				 	free(tmp->val);$
   315				free(tmp);$
   316			}$
   317			free(list);$
   318		}$
   319	}$
   320	$
   321	void	cmd_info(t_cmd_list *cmd)$
   322	{$
   323		int	i;$
   324	$
   325		i = 0;$
   326		while (cmd)$
   327		{$
   328			i = 0;$
   329			while (cmd->cmd && cmd->cmd[i])$
   330				printf("cmd -> %s\n", cmd->cmd[i++]);$
   331			printf("infile -> %d\n", cmd->infile);$
   332			printf("outfile -> %d\n", cmd->outfile);$
   333			cmd = cmd->next;$
   334		}$
   335	}$
   336	$
   337	void	free_hrd(t_here_doc *h)$
   338	{$
   339		if (h)$
   340		{$
   341			if (h->next)$
   342				free_hrd(h->next);$
   343			if (h->infile != 0)$
   344				close(h->infile);$
   345			free(h);$
   346		}$
   347	}$
   348	$
   349	int	pars(t_data *d, char *rl)$
   350	{$
   351		t_list		*lexer;$
   352		t_here_doc	*hrd;$
   353	$
   354		lexer = NULL;$
   355		hrd = NULL;$
   356		lexer = lexecal_analyzer(rl);$
   357		if (lexer == NULL || syntax_error(lexer))$
   358		{$
   359			if (lexer)$
   360			{$
   361				d->exit_status = 258;$
   362				free_lexer(lexer);$
   363			}$
   364			free(rl);$
   365			return (1);$
   366		}$
   367		hrd = open_here_doc(d, lexer);$
   368		d->list_of_cmd = NULL;$
   369		if (!d->kill_here)$
   370			d->list_of_cmd = command_table(d, hrd, lexer);$
   371		free_hrd(hrd);$
   372		//cmd_info(d->list_of_cmd);$
   373		system("echo pars > leaks && leaks minishell | grep bytes >> leaks");$
   374		free_lexer(lexer);$
   375		return (0);$
   376	}$
   377	$
   378	void	start_shell(t_data *d)$
   379	{$
   380		char	*rl;$
   381	$
   382		while (1)$
   383		{$
   384			rl = put_prompt(d);$
   385			if (!rl)$
   386			{$
   387				ft_putendl_fd("exit", 1);$
   388				tcsetattr(0, TCSANOW, &d->old_tty);$
   389				exit(0);$
   390			}$
   391			if (*rl)$
   392			{$
   393				add_history(rl);$
   394				if (pars(d, rl))$
   395					continue ;$
   396				if (!d->kill_here && d->list_of_cmd)$
   397					pipeline(d);$
   398				free_all(d);$
   399				system("echo pars >> leaks && leaks minishell | grep bytes >> leaks");$
   400			}$
   401			else$
   402				d->exit_status = 0;$
   403			free(rl);$
   404		}$
   405	}$
   406	$
   407	int	main(int ac, char **av, char **env)$
   408	{$
   409		setup_shell(ac, av, env, &g_d);$
   410		start_shell(&g_d);$
   411		return (0);$
   412	}$
